version: 0.2

phases:
  pre_build:
    commands:
      # Show env deploying to
      - echo "Deploying into environment ${TF_WORKSPACE}"
      # Log in to ECR
      - echo Logging in to Amazon ECR...
      - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
      # Fetch ssm parameter store
      - export TF_VAR_db_password=$(aws ssm get-parameter --name $SSM_PARAM_DB_PASSWORD_NAME --with-decryption --query "Parameter.Value" --output text)
  
  build:
    commands:
      # Build Docker image
      - echo Building Docker image...
      - docker-compose -f ./docker-compose.yaml build api
      # Tag Docker image
      - docker tag $ECR_URI:latest $ECR_URI:$IMAGE_TAG

  post_build:
    commands:
      # Tag and push Docker image
      - echo Pushing Docker image...
      - docker push $ECR_URI:latest
      - docker push $ECR_URI:$IMAGE_TAG

      # Initialize and apply Terraform
      - echo Initializing and applying Terraform...
      - cd infra
      - docker-compose -f deploy/docker-compose.yaml run --rm terraform init # Ensure the correct path to the docker-compose.yaml
      - docker-compose -f deploy/docker-compose.yaml run --rm terraform workspace select $TF_WORKSPACE || docker-compose -f deploy/docker-compose.yaml run --rm terraform workspace new $TF_WORKSPACE
      - docker-compose -f deploy/docker-compose.yaml run --rm terraform apply -auto-approve

      # Done
      - echo "Terraform deployment completed for environment $TF_WORKSPACE."

cache:
  paths:
    - /root/.cache/docker # Docker cache if applicable
